import logging
from aiogram.types import ContentType
import config
from shazam import shazam_voice
from aiogram import Bot, Dispatcher, executor, types

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º `/start`
    """
    await message.reply("–•–µ–ª–æ—É üôà \n–ù–∞–π–¥—É –ø–µ—Å–Ω—é –ø–æ –∑–≤—É–∫–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ üîç")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    """
    –ø–æ–º–æ—â —é–∑–µ—Ä—É `/help`
    """
    await message.answer("""–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Å–Ω–µ–π (–º–∏–Ω 3 —Å–µ–∫—É–Ω–¥—ã) üîç""")


@dp.message_handler(content_types=[ContentType.VOICE])
async def voice_message_handler(message: types.Message):
    voice = await bot.get_file(message.voice.file_id)
    sound = shazam_voice(voice.file_path)
    if sound['result'] is None:
        await message.reply(f"{message.chat.first_name}, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ")
    else:
        await message.answer(
            f"""DATE::{sound['result']['release_date']} \n
            #{sound['result']['artist'].replace(' ', '_')} 
            - {sound['result']['title']}.""")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
